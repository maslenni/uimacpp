#
# TEMPORARY Build file, AUTO-GENERATED by http://vcproj2cmake.sf.net
# DO NOT CHECK INTO VERSION CONTROL OR APPLY "PERMANENT" MODIFICATIONS!!
#
project(uimacpp)

# >= 2.6 due to crucial set_property(... COMPILE_DEFINITIONS_* ...)
cmake_minimum_required(VERSION 2.6)

#if(COMMAND cmake_policy)
#  if(POLICY CMP0005)
#    cmake_policy(SET CMP0005 NEW) # automatic quoting of brackets
#  endif(POLICY CMP0005)
#
#  if(POLICY CMP0011)
#    # we do want the includer to be affected by our updates,
#    # since it might define project-global settings.
#    cmake_policy(SET CMP0011 OLD)
#  endif(POLICY CMP0011)
#  if(POLICY CMP0015)
#    # .vcproj contains relative paths to additional library directories, thus we need to be able to cope with that
#    cmake_policy(SET CMP0015 NEW)
#  endif(POLICY CMP0015)
#endif(COMMAND cmake_policy)



#set(CMAKE_MODULE_PATH "././cmake/Modules" ${CMAKE_MODULE_PATH})

#set(V2C_CONFIG_DIR_LOCAL "./cmake/vcproj2cmake")

# include the main file for pre-defined vcproj2cmake helper functions
#include(vcproj2cmake_func)

# include the main file for pre-defined vcproj2cmake definitions
#include(vcproj2cmake_defs)

#include(${V2C_CONFIG_DIR_LOCAL}/hook_pre.txt OPTIONAL)


set(LIBRARY_TYPE SHARED)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

if (MSVC)
    # Force to always compile with W3
    set(wlevel "/W3")
    if (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "${wlevel}" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${wlevel}")
    endif()

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Oi /Ob2")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DNOMINMAX)

    include_directories(${PROJECT_SOURCE_DIR}/include_for_msvc)
elseif (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    # Update if necessary
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -c ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11") #TODO:  -Wconversion -Weffc++")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -ggdb3")
endif()

add_definitions(-D__STDC_LIMIT_MACROS)

# this part is for including a file which contains
# _globally_ applicable settings for all sub projects of a master project
# (compiler flags, path settings, platform stuff, ...)
# e.g. have vcproj2cmake-specific MasterProjectDefaults_vcproj2cmake
# which then _also_ includes a global MasterProjectDefaults module
# for _all_ CMakeLists.txt. This needs to sit post-project()
# since e.g. compiler info is dependent on a valid project.
# MasterProjectDefaults_vcproj2cmake is supposed to define
# generic settings (such as V2C_HOOK_PROJECT, defined as e.g.
# ./cmake/vcproj2cmake/hook_project.txt, and other hook include variables below).
# NOTE: it usually should also reset variables V2C_LIBS, V2C_SOURCES etc.
# as used below since they should contain directory-specific contents only, not accumulate!
#include(MasterProjectDefaults_vcproj2cmake OPTIONAL)

# hook e.g. for invoking Find scripts as expected by
# the _LIBRARIES / _INCLUDE_DIRS mappings created
# by your include/dependency map files.

#include(${V2C_HOOK_PROJECT} OPTIONAL)

set(CMAKE_C_COMPILER "/usr/bin/gcc")
set(CMAKE_CXX_COMPILER "/usr/bin/g++")


#if (LINK_SHARED)
#    set(LIBRARY_TYPE SHARED)
#else()
#    set(LIBRARY_TYPE STATIC)
#endif()

set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ../lib)


#get_filename_component(PARENT_DIR ${MYPROJECT_DIR} DIRECTORY)

add_subdirectory(../include .)

  set(APR_HOME ..)
  set(ICU_HOME ..)
  set(XERCES_HOME ..)
#  set(UIMACPP_HOME ..)
  set(UIMACPP_HOME "/home/steve/projects/uimaAnalyzer/uimacpp-2.4.0-rc7")

  include_directories(
    "$(APR_HOME)/include"
    "$(ICU_HOME)/include"
    "$(JAVA_HOME)/include"
#    "$(JAVA_HOME)/include/win32"
    "$(UIMACPP_HOME)/include"
    "$(UIMACPP_HOME)/include/apr-1"
#    "/usr/lib/x86_64-linux-gnu/"
    "$(UIMACPP_HOME)/include/lib"
    "$(XERCES_HOME)/include"
    cas
    framework
    jni
  )


#find_library($(APR_HOME)/lib libapr1-1)
#message("apr-1 is at: $(APR_HOME)/lib")
#target_link_libraries(apr-1 LINK_PUBLIC ${lib1_location})

#find_package(libapr-1)


    set(SOURCES_files_Source_Files
      cas/arrayfs.cpp
      cas/cas.cpp
      cas/casexception.cpp
      cas/caswriter_abase.cpp
      cas/featurestructure.cpp
      cas/fsfilterbuilder.cpp
      cas/fsindex.cpp
      cas/fsindexrepository.cpp
      cas/fsiterator.cpp
      cas/internal_casdeserializer.cpp
      cas/internal_casimpl.cpp
      cas/internal_casserializer.cpp
      cas/internal_fspromoter.cpp
      cas/internal_serializedcas.cpp
      cas/internal_typeshortcuts.cpp
      cas/internal_xmlconstants.cpp
      cas/listfs.cpp
      cas/lowlevel_fsheap.cpp
      cas/lowlevel_index.cpp
      cas/lowlevel_indexcomparator.cpp
      cas/lowlevel_indexdefinition.cpp
      cas/lowlevel_indexrepository.cpp
      cas/lowlevel_internal_indexes.cpp
      cas/lowlevel_typesystem.cpp
      cas/sofastream.cpp
      cas/typenamespace.cpp
      cas/typesystem.cpp
      cas/xcasdeserializer.cpp
      cas/xcasdeserializer_handler.cpp
      cas/xmideserializer.cpp
      cas/xmideserializer_handler.cpp
      cas/xmiwriter.cpp
      cas/xmlerror_handler.cpp
      cas/xmltypesystemreader.cpp
      cas/xmltypesystemwriter.cpp
      cas/xmlwriter.cpp
      framework/annotator.cpp
      framework/annotator_context.cpp
      framework/annotator_mgr.cpp
      framework/casdefinition.cpp
      framework/casiterator.cpp
      framework/caspool.cpp
      framework/config_param.cpp
      framework/consoleui.cpp
      framework/cp2ucnvrt.cpp
      framework/dottypesystemwriter.cpp
      framework/engine.cpp
      framework/exceptions.cpp
      framework/ftools.cpp
      framework/internal_aggregate_engine.cpp
      framework/internal_capability_container.cpp
      framework/internal_engine_base.cpp
      framework/internal_jedii_engine.cpp
      framework/internal_primitive_engine.cpp
      framework/language.cpp
      framework/log.cpp
      framework/res_abase.cpp
      framework/res_annotator.cpp
      framework/resmgr.cpp
      framework/strtools.cpp
      framework/taemetadata.cpp
      framework/taespecifier.cpp
      framework/taespecifierbuilder.cpp
      framework/timedatetools.cpp
      framework/token_properties.cpp
      framework/typesystemdescription.cpp
      framework/u2cpcnvrt.cpp
      framework/unistrref.cpp
      jni/jni.cpp
      jni/jni_string.cpp
      jni/jni_utils.cpp


      # my addition
      utils/deployCppService.cpp
      utils/ActiveMQAnalysisEngineService.cpp
      utils/runAECpp.cpp

    )

    set(SOURCES_files_Header_Files
      cas/uima/annotator_generic.inl
      cas/uima/arrayfs.hpp
      cas/uima/cas.hpp
      cas/uima/casconsumer_generic.inl
      cas/uima/casexception.hpp
      cas/uima/featurestructure.hpp
      cas/uima/fsfilterbuilder.hpp
      cas/uima/fsindex.hpp
      cas/uima/fsindexrepository.hpp
      cas/uima/fsiterator.hpp
      cas/uima/internal_casdeserializer.hpp
      cas/uima/internal_casimpl.hpp
      cas/uima/internal_casserializer.hpp
      cas/uima/internal_fspromoter.hpp
      cas/uima/internal_fsvalue_accessors.hpp
      cas/uima/internal_serializedcas.hpp
#      cas/uima/internal_tcasimpl.hpp
      cas/uima/internal_typeshortcuts.hpp
      cas/uima/internal_xmlconstants.hpp
      cas/uima/listfs.hpp
      cas/uima/lowlevel_defaultfsiterator.hpp
      cas/uima/lowlevel_fsfilter.hpp
      cas/uima/lowlevel_fsheap.hpp
      cas/uima/lowlevel_index.hpp
      cas/uima/lowlevel_indexcomparator.hpp
      cas/uima/lowlevel_indexdefinition.hpp
      cas/uima/lowlevel_indexiterator.hpp
      cas/uima/lowlevel_indexrepository.hpp
      cas/uima/lowlevel_internal_heap.hpp
      cas/uima/lowlevel_internal_indexes.hpp
      cas/uima/lowlevel_internal_indexfactory.hpp
      cas/uima/lowlevel_typedefs.hpp
      cas/uima/lowlevel_typesystem.hpp
      cas/uima/sofaid.hpp
      cas/uima/sofastream.hpp
      cas/uima/sofastreamhandler.hpp
#      cas/uima/tcas.hpp
      cas/uima/typesystem.hpp
      cas/uima/xcasdeserializer.hpp
      cas/uima/xcasdeserializer_handler.hpp
      cas/uima/xmideserializer.hpp
      cas/uima/xmideserializer_handler.hpp
      cas/uima/xmishareddata.hpp
      cas/uima/xmiwriter.hpp
      cas/uima/xmlerror_handler.hpp
      cas/uima/xmltypesystemreader.hpp
      cas/uima/xmltypesystemwriter.hpp
      cas/uima/xmlwriter.hpp
      framework/uima/annotator.hpp
      framework/uima/annotator_abase.hpp
      framework/uima/annotator_aux.hpp
      framework/uima/annotator_context.hpp
      framework/uima/annotator_mgr.hpp
      framework/uima/annotator_timing.hpp
      framework/uima/assertmsg.h
      framework/uima/capability.hpp
      framework/uima/casdefinition.hpp
      framework/uima/casiterator.hpp
      framework/uima/caspool.hpp
      framework/uima/caswriter_abase.hpp
      framework/uima/ccsid.hpp
      framework/uima/comp_ids.h
      framework/uima/config_param.hpp
      framework/uima/configure.h
      framework/uima/consoleui.hpp
      framework/uima/cp2ucnvrt.hpp
      framework/uima/dirwalk.hpp
      framework/uima/dllfile.hpp
      framework/uima/dottypesystemwriter.hpp
      framework/uima/endian.h
      framework/uima/engine.hpp
      framework/uima/engine_state.hpp
      framework/uima/envvar.hpp
      framework/uima/envvars.h
      framework/uima/err_ids.h
      framework/uima/exceptions.hpp
      framework/uima/filename.hpp
#      framework/uima/filter_abase.hpp
      framework/uima/ftools.hpp
      framework/uima/importdescription.hpp
      framework/uima/internal_aggregate_engine.hpp
      framework/uima/internal_capability_container.hpp
      framework/uima/internal_engine_base.hpp
      framework/uima/internal_jedii_engine.hpp
      framework/uima/internal_primitive_engine.hpp
      framework/uima/language.hpp
      framework/uima/location.hpp
      framework/uima/log.hpp
      framework/uima/macros.h
      framework/uima/msg.h
      framework/uima/msgstrtab.h
      framework/uima/pragmas.hpp
      framework/uima/res_abase.hpp
      framework/uima/res_annotator.hpp
      framework/uima/resmgr.hpp
      framework/uima/result_specification.hpp
      framework/uima/sofamapping.hpp
      framework/uima/stltools.hpp
      framework/uima/strconvert.hpp
      framework/uima/strtools.hpp
      framework/uima/taemetadata.hpp
      framework/uima/taespecifier.hpp
      framework/uima/taespecifierbuilder.hpp
      framework/uima/text.h
      framework/uima/timedatetools.hpp
      framework/uima/token_properties.hpp
      framework/uima/trace.hpp
      cas/uima/type_or_feature.hpp
      cas/uima/typenamespace.hpp
      framework/uima/types.h
      framework/uima/typesystemdescription.hpp
      framework/uima/u2cpcnvrt.hpp
      framework/uima/unistrref.hpp
      jni/uima/jni.hpp
      jni/uima/jni_string.hpp
      jni/uima/jni_utils.hpp
#      framework/uima/annotator_generic.inl
#      jni/uima/com_ibm_itu_JTafEngine.h

      # my addition
      utils/deployCppService.hpp
      utils/ActiveMQAnalysisEngineService.hpp



    )
    source_group("Source Files" FILES ${SOURCES_files_Source_Files})

    set(SOURCES_Source_Files ${SOURCES_files_Source_Files})

    source_group("Header Files" FILES ${SOURCES_files_Header_Files})

    set(SOURCES_Header_Files ${SOURCES_files_Header_Files})

    set(SOURCES_ ${SOURCES_Source_Files} ${SOURCES_Header_Files}
  )

include_directories(BEFORE ${PROJECT_SOURCE_DIR})

#include(${V2C_HOOK_POST_SOURCES} OPTIONAL)

# Steve's amendments
#set(CMAKE_BUILD_TYPE "Debug")


#if(CMAKE_BUILD_TYPE STREQUAL "Debug")

  # hook include after all definitions have been made
  # (but _before_ target is created using the source list!)
#  include(${V2C_HOOK_POST_DEFINITIONS} OPTIONAL)

  set(SOURCES ${SOURCES_} ${V2C_SOURCES})


#  link_directories(
##    "$(OutDir)"
##    "$(APR_HOME)/Release"
#    "$(APR_HOME)/lib"
#    "$(ICU_HOME)/lib"
#    "$(XERCES_HOME)/lib"
#    "$(UIMACPP_HOME)/lib"
#    ${V2C_LIB_DIRS}
#  )

  add_library( uimacpp SHARED ${SOURCES} )

#  target_link_libraries(uimacpp xerces-c_2 icuuc libapr-1 ${V2C_LIBS})
#  target_link_libraries(uimacpp xerces-c_2 icuuc libapr-1 ${V2C_LIBS})

  # e.g. to be used for tweaking target properties etc.
#  include(${V2C_HOOK_POST_TARGET} OPTIONAL)
#endif(CMAKE_BUILD_TYPE STREQUAL "Debug")

if(TARGET uimacpp)

#  set_property(TARGET uimacpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG
#    UIMA_SUPPRESS_TIMING
#    UIMA_VERSION=1.4.4
#    WIN32
#    _CRT_NONSTDC_NO_DEPRECATE
#    _CRT_SECURE_NO_DEPRECATE
#    _DEBUG
#    _UIMA_LIBRARY_
#    _USRDLL
#    _WINDOWS
#  )

  if(MSVC)
  set_property(TARGET uimacpp APPEND PROPERTY COMPILE_FLAGS_DEBUG 
    /EHac
  )
  endif(MSVC)
endif(TARGET uimacpp)

#
#
#  include_directories(
#    "$(APR_HOME)/include"
#    "$(ICU_HOME)/include"
#    "$(JAVA_HOME)/include"
#    "$(JAVA_HOME)/include/win32"
#    "$(UIMACPP_HOME)/include"
#    "$(UIMACPP_HOME)/include/apr-1"
#    "$(XERCES_HOME)/include"
#    cas
#    framework
#    jni
#  )
#
#if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE STREQUAL "Release")
#
#  # hook include after all definitions have been made
#  # (but _before_ target is created using the source list!)
##  include(${V2C_HOOK_POST_DEFINITIONS} OPTIONAL)
#
#  set(SOURCES ${SOURCES_} ${V2C_SOURCES})
#
#  link_directories(
##    "$(OutDir)"
#    "$(APR_HOME)/Release"
#    "$(XERCES_HOME)/lib"
#    "$(ICU_HOME)/lib"
#    "$(UIMACPP_HOME)/lib"
#    ${V2C_LIB_DIRS}
#  )
#
#  add_library( uimacpp SHARED ${SOURCES} )
#
#  target_link_libraries(uimacpp
#    xerces-c_2
#    icuuc
#    libapr-1
#    ${V2C_LIBS}
#  )
#
#  # e.g. to be used for tweaking target properties etc.
#  include(${V2C_HOOK_POST_TARGET} OPTIONAL)
#endif(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE STREQUAL "Release")


if(TARGET uimacpp)

#  set_property(TARGET uimacpp APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE
#    NDEBUG
#    TRACEOFF
#    UIMA_SUPPRESS_TIMING
#    UIMA_VERSION=1.4.4
#    WIN32
#    _CRT_NONSTDC_NO_DEPRECATE
#    _CRT_SECURE_NO_DEPRECATE
#    _UIMA_LIBRARY_
#    _USRDLL
#    _WINDOWS
#  )

  if(MSVC)
  set_property(TARGET uimacpp APPEND PROPERTY COMPILE_FLAGS_RELEASE 
    /EHac
  )
  endif(MSVC)
endif(TARGET uimacpp)

set_property(TARGET uimacpp PROPERTY PROJECT_LABEL "uimacpp")
#set_property(TARGET uimacpp PROPERTY VS_KEYWORD "Win32Proj")

#v2c_rebuild_on_update(uimacpp "${CMAKE_CURRENT_SOURCE_DIR}/uimacpp.vcproj" ${CMAKE_CURRENT_LIST_FILE} "../../vcproj2cmake-code/scripts/vcproj2cmake.rb" ".")

#include(${V2C_HOOK_POST} OPTIONAL)

add_executable(uimacpp-app utils/runAECpp.cpp)
target_link_libraries(uimacpp-app /home/steve/projects/uimaAnalyzer/uimacpp-2.4.0-rc7/lib/libapr-1)
